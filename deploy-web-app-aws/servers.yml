Description: >
  Fabio Jaremciuc / Deploy a High-Availability Web App using CloudFormation

Parameters: 
  EnvironmentName:
    Description: Single Parameter that we are passing with the env name.
    Type: String

  ServerImageID:
    Description: Amazon Machine Image ID of Operating System
    Type: String

  ServerInstanceType:
    Description: Instance type
    Type: String

  S3BucketName:
    Description: S3 Bucket name
    Type: String

  S3ArchiveName:
    Description: S3 archive name with the application code
    Type: String
    
Resources: 

  #-------------------------------------------------------------------
  #--------------------- Security Group ------------------------------ 
  #-------------------------------------------------------------------
  LBSecGroup:    
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:  
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our host and SSH from local only 
      VpcId:  
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  #-------------------------------------------------------------------
  #--------------------- Launch Configuration ------------------------ 
  #-------------------------------------------------------------------
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://${S3BucketName}/${S3ArchiveName}.zip .
          unzip -o ${S3ArchiveName}.zip
          rm -rf ${S3ArchiveName}.zip
      ImageId: !Ref ServerImageID
      IamInstanceProfile: !Ref S3InstanceProfile
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref ServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  #-------------------------------------------------------------------
  #--------------------- Auto Scaling Group --------------------------
  #-------------------------------------------------------------------
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MaxSize: '4'
      MinSize: '4'
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  #-------------------------------------------------------------------
  #--------------------- Load Balancer -------------------------------
  #-------------------------------------------------------------------
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP
  LoadBalancerListernerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  #-------------------------------------------------------------------
  #--------------------- Target Group --------------------------------
  #-------------------------------------------------------------------
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"

  #-------------------------------------------------------------------
  #--------------------- S3 Policy Role ------------------------------
  #-------------------------------------------------------------------
  S3BucketPolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: S3BucketPolicyRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "s3:GetObject"
                Resource: "*"
  S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref S3BucketPolicyRole

Outputs:
  WebAppURL:
    Description: The URL address output
    Value: !Join [ "", [ "http://", !GetAtt WebAppLoadBalancer.DNSName ] ]
    Export:
      Name: !Sub ${EnvironmentName}-URL